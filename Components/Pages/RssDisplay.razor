@page "/rssdisplay"
@using System.Xml
@using System.ServiceModel.Syndication
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>RssDisplay</PageTitle>

<h1>RssDisplay</h1>

<p>This component demonstrates showing \#MostlyBalanced news sources via RSS.</p>

@if (rssInfos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @code
    {
        private String tableDisplay = "display:block";
    }
    <button @onclick="@(e => updateContent())" > CLICK ME </button>

    <table class="table" style="@tableDisplay">
        <thead>
            <tr>
                <th>Title</th>
                <th>Source</th>
                <th>Publishing time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rssInfo in rssInfos)
            {
                <tr>
                    <td><a href="@rssInfo.Link" target="_blank">@rssInfo.Title</a></td>
                    <td>@rssInfo.Source</td>
                    <td>@rssInfo.DateString</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public void updateContent()
    {
        if(tableDisplay == "display:block")
        {
            tableDisplay = "display:none";
        } else {
            tableDisplay = "display:block";
        }
        Console.WriteLine("CLICKED IT");
    }

    private List<RssInfo>? rssInfos;
    private static String[] rssSites = new String[] {
        "https://news.google.com/rss/search?q=site%3Areuters.com%20when%3A12h&hl=en-US&gl=US&ceid=US%3Aen",
        "https://news.google.com/rss/search?q=site%3Aapnews.com%20when%3A1d&hl=en-US&gl=US&ceid=US%3Aen",
        "https://news.google.com/rss/search?q=site%3Ausafacts.org%20when%3A7d&hl=en-US&gl=US&ceid=US%3Aen",
        "https://news.google.com/rss/search?q=site%3Asan.com%20when%3A1d&hl=en-US&gl=US&ceid=US%3Aen"
    };
    private static String[] rssSiteNames = new String[] {
        "Reuters",
        "APNews",
        "USAFacts",
        "ASAN"
    };

    //@Todo: make a variable like: "DisplayArticles", and change what that is based on the "onClick" siteName
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);

        List<RssSource> rssSourceList = new List<RssSource>();
        List<RssInfo> rssInfoCache = new List<RssInfo>();
        int listLocation = 0;
        foreach(String rssFullUri in rssSites)
        {
            RssSource curSource = new RssSource(rssFullUri, rssSiteNames[listLocation]);
            listLocation++;
            XmlReader reader = XmlReader.Create(rssFullUri);
            SyndicationFeed feed = SyndicationFeed.Load(reader);
            
            reader.Close();
            foreach (SyndicationItem item in feed.Items)
            {
                RssInfo info = new RssInfo();
                info.Title = item.Title.Text;
                info.Summary = item.Summary.Text;
                info.Link = item.Links[0].Uri.AbsoluteUri;
                info.Date = item.PublishDate;
                info.DateString = item.PublishDate.ToString();
                info.Source = curSource.NewsSource;
                curSource.Articles.Add(info);
                rssInfoCache.Add(info);
            }
            curSource.Articles = curSource.Articles.OrderBy(o=>o.Date).Reverse().ToList();
            rssSourceList.Add(curSource);
        }
        List<RssInfo> SortedList = rssInfoCache.OrderBy(o=>o.Date).Reverse().ToList();
        rssInfos = SortedList.GetRange(0, 100);
        return;
    }

    protected class RssInfo
    {
        public DateTimeOffset? Date { get; set; }
        public string? DateString { get; set; }
        public string? Title { get; set; }
        public string? Summary { get; set; }
        public string? Link { get; set; }
        public string? Source { get; set; }
        }

    protected class RssSource
    {
        public RssSource(string UriIn, string source)
        {
            this.Uri = UriIn;
            this.NewsSource = source;
            this.Articles = new List<RssInfo>();
            this.ContentString = "";
        }

        public string Uri { get; set; }
        public string NewsSource { get; set; }

        public List<RssInfo> Articles { get; set; }
        public String ContentString { get; set; }

        }
}